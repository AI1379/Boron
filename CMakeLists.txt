cmake_minimum_required(VERSION 3.14)
project(Boron VERSION 0.1.0)

message(STATUS "$ENV{PATH}")

if(WIN32)
  message(STATUS "Configuring for Windows")
  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
  cmake_policy(SET CMP0091 NEW)
  set(CMAKE_CXX_FLAGS_DEBUG
      "${CMAKE_CXX_FLAGS_DEBUG} -D_ITERATOR_DEBUG_LEVEL=2 -MTd")
  set(CMAKE_CXX_FLAGS_RELEASE
      "${CMAKE_CXX_FLAGS_RELEASE} -D_ITERATOR_DEBUG_LEVEL=0 -MT")
elseif(UNIX AND NOT APPLE)
  message(STATUS "Configuring for Linux")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
elseif(APPLE)
  message(STATUS "Configuring for macOS")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_LIBCPP_DEBUG=1")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
else()
  message(FATAL_ERROR "Unsupported platform")
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Wpedantic -Werror")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} -O3")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(BORON_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(BORON_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(BORON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(BORON_MODULE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

list(APPEND CMAKE_MODULE_PATH ${BORON_MODULE_DIR})

add_subdirectory(src)

if(BORON_TEST_ENABLED)
  add_subdirectory(test)
endif()
